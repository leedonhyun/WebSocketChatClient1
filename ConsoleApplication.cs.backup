using ChatSystem.Client.Inte        System.Console.WriteLine("=== Advanced WebSocket Chat Client with Group Support ===");
        System.Console.WriteLine("Basic Commands:");
        System.Console.WriteLine("  /connect [url] - Connect to server");
        System.Console.WriteLine("  /disconnect - Disconnect from server");
        System.Console.WriteLine("  /username <n> - Set username");
        System.Console.WriteLine("  /users - List online users");
        System.Console.WriteLine("  /quit - Exit application");
        System.Console.WriteLine();
        System.Console.WriteLine("Chat Commands:");
        System.Console.WriteLine("  /msg <user> <message> - Send private message");
        System.Console.WriteLine("  /room <roomid> <message> - Send message to specific room");
        System.Console.WriteLine();
        System.Console.WriteLine("Room Commands:");
        System.Console.WriteLine("  /create <name> [desc] [-private] [-password <pwd>] - Create room");
        System.Console.WriteLine("  /join <roomid> [password] - Join room");
        System.Console.WriteLine("  /leave [roomid] - Leave room");
        System.Console.WriteLine("  /rooms - List available rooms");
        System.Console.WriteLine("  /members [roomid] - List room members");
        System.Console.WriteLine("  /invite <roomid> <user> - Invite user to room");
        System.Console.WriteLine("  /kick <roomid> <user> - Kick user from room");
        System.Console.WriteLine();
        System.Console.WriteLine("File Commands:");
        System.Console.WriteLine("  /send [-a] <filepath> [username] - Send file");
        System.Console.WriteLine("  /accept <fileId> - Accept incoming file");
        System.Console.WriteLine("  /reject <fileId> - Reject incoming file");
        System.Console.WriteLine();
        System.Console.WriteLine("Note: Any message not starting with '/' will be sent as public chat");
        System.Console.WriteLine();ng ChatSystem.Models;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChatSystem.Client.Console;

public class ConsoleApplication
{
    private readonly IChatClient _chatClient;
    private readonly Dictionary<string, FileTransferInfo> _pendingFiles = new();

    public ConsoleApplication(IChatClient chatClient)
    {
        _chatClient = chatClient;

        _chatClient.MessageReceived += OnMessageReceived;
        _chatClient.StatusChanged += OnStatusChanged;
        _chatClient.FileOfferReceived += OnFileOfferReceived;
        _chatClient.FileTransferProgress += OnFileTransferProgress;
    }

    public async Task RunAsync()
    {
        System.Console.WriteLine("=== Advanced WebSocket Chat Client ===");
        System.Console.WriteLine("Commands:");
        System.Console.WriteLine("  /connect [url] - Connect to server");
        System.Console.WriteLine("  /disconnect - Disconnect from server");
        System.Console.WriteLine("  /username <name> - Set username");
        System.Console.WriteLine("  /users - List online users");
        System.Console.WriteLine("  /send [-a] <filepath> [username] - Send file");
        System.Console.WriteLine("  /accept <fileId> - Accept incoming file");
        System.Console.WriteLine("  /reject <fileId> - Reject incoming file");
        System.Console.WriteLine("  /quit - Exit application");
        System.Console.WriteLine("  Any other text will be sent as a chat message");
        System.Console.WriteLine();

        while (true)
        {
            var input = System.Console.ReadLine();
            if (string.IsNullOrEmpty(input)) continue;

            if (input.StartsWith("/"))
            {
                if (input.Equals("/quit", StringComparison.OrdinalIgnoreCase))
                {
                    await _chatClient.DisconnectAsync();
                    break;
                }

                await (_chatClient as ChatClient)?.ProcessCommandAsync(input)!;
            }
            else
            {
                if (_chatClient.IsConnected)
                    await _chatClient.SendMessageAsync(input);
                else
                    System.Console.WriteLine("Not connected to server. Use /connect to connect.");
            }
        }
    }

    private static void OnMessageReceived(ChatMessage message)
    {
        var timestamp = message.Timestamp.ToString("HH:mm:ss");
        switch (message.Type)
        {
            case "system":
                System.Console.WriteLine($"[{timestamp}] * {message.Message}");
                break;
            case "chat":
                System.Console.WriteLine($"[{timestamp}] {message.Username}: {message.Message}");
                break;
            case "userList":
                System.Console.WriteLine($"[{timestamp}] Online users: {message.Message}");
                break;
        }
    }

    private static void OnStatusChanged(string status)
    {
        System.Console.WriteLine($"Status: {status}");
    }

    private void OnFileOfferReceived(FileTransferInfo fileInfo)
    {
        _pendingFiles[fileInfo.Id] = fileInfo;
        System.Console.WriteLine($"\n*** FILE OFFER RECEIVED ***");
        System.Console.WriteLine($"From: {fileInfo.FromUsername}");
        System.Console.WriteLine($"File: {fileInfo.FileName}");
        System.Console.WriteLine($"Size: {fileInfo.FileSize:N0} bytes");
        System.Console.WriteLine($"File ID: {fileInfo.Id}");
        System.Console.WriteLine($"Use '/accept {fileInfo.Id}' to accept or '/reject {fileInfo.Id}' to reject");
        System.Console.WriteLine();
    }

    private void OnFileTransferProgress(string fileId, int chunkIndex, int totalChunks)
    {
        if (_pendingFiles.TryGetValue(fileId, out var fileInfo))
        {
            var progress = (double)chunkIndex / totalChunks * 100;
            System.Console.WriteLine($"File transfer progress: {fileInfo.FileName} - {progress:F1}%");
        }
    }
}